library(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
dtrain <- xgb.DMatrix(agaricus.train$data, label = agaricus.train$label)
dtest <- xgb.DMatrix(agaricus.test$data, label = agaricus.test$label)
watchlist <- list(train = dtrain, eval = dtest)
## A simple xgb.train example:
param <- list(max_depth = 2, eta = 1, verbose = 0, nthread = 2,
objective = "binary:logistic", eval_metric = "auc")
bst <- xgb.train(param, dtrain, nrounds = 2, watchlist)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
dtrain <- xgb.DMatrix(agaricus.train$data, label = agaricus.train$label)
dtest <- xgb.DMatrix(agaricus.test$data, label = agaricus.test$label)
watchlist <- list(train = dtrain, eval = dtest)
## A simple xgb.train example:
param <- list(max_depth = 2, eta = 1, verbose = 0, nthread = 2,
objective = "binary:logistic", eval_metric = "auc")
bst <- xgb.train(param, dtrain, nrounds = 30, watchlist)
glimpse(agaricus.train)
library(tidyverse)
glimpse(agaricus.train)
df <- agaricus.train %>% as.matrix() %>% as_tibble()
df %>% glimpse()
df <- agaricus.train %>% as.matrix() %>% as_tibble()
df %>% glimpse()
agaricus.train %>% as.matrix()
class(agaricus.train)
df <- agaricus.train %>% as_tibble()
agaricus.train
agaricus.train %>% as.matrix()
agaricus.train %>% as.data.frame()
str(agaricus.train)
df <- agaricus.train %>% summary()
df
class(df)
df <- agaricus.train %>% summary() %>% as.data.frame()
df
df <- agaricus.train %>% as.matrix()
df
df[1]
dimnames(agaricus.train)
df[1]
x_train <- agaricus.train %>% as.matrix()[1]
x_train <- agaricus.train %>% as.matrix()[1]
x_train <- agaricus.train %>% as.matrix()
x_train
x_train[1]
x_train <- agaricus.train %>% as.matrix()[1]
x <- m[1]
m <- agaricus.train %>% as.matrix()
x <- m[1]
colnames(m)
dimnames(m)
colnames(x)
dimnames(x)
x
str(x)
Dimnames(x)
dimnames(x)
x[1]
x[2]
dim(x)
x
dimnames(agaricus.test)
str(agaricus.test)
m <- agaricus.train$data
str(m)
x <- agaricus.train$data
x <- agaricus.train$data %>% as.matrix()
class(x)
x
x <- agaricus.train$data %>% as.matrix() %>% as_tibble()
x
y <- agaricus.train$label
y
glimpse(x)
x <- agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(pred = predict(agaricus.test, baseline))
x <- agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(pred = predict(baselineagaricus.test$data))
x <- agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(pred = predict(baseline, agaricus.test$data))
baseline <- xgb.train(param, dtrain, nrounds = 30, watchlist)
x <- agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(pred = predict(baseline, agaricus.test$data))
x %>% glimpse()
df <- agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat = predict(baseline, agaricus.test$data),
y = agaricus.test$label)
df %>% glimpse()
df %>%
group_by(`odor=almond`) %>%
summarise(
avg_pred = mean(y_hat)
)
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`odor=almond` == 1, 0.5, 0))
#set the prior weight for all almond-smelling mushrooms to be 50%
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`odor=almond` == 1, 0.5, 0)) %>%
unlist() %>%
as.numeric()
setinfo(dtrain, log(prior_probabilities))
#set the prior weight for all almond-smelling mushrooms to be 50%
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`odor=almond` == 1, 0.5, 1)) %>%
unlist() %>%
as.numeric()
setinfo(dtrain, log(prior_probabilities))
prior_probabilities
log(prior_probabilities)
class(prior_probabilities)
str(prior_probabilities)
setinfo(dtrain, log(prior_probabilities))
?setinfo
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data)
y = agaricus.test$label) %>%
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_pred = mean(y_hat)
)
y_hat_baseline = predict(baseline, agaricus.test$data),
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = avg(y)
)
y_hat_baseline = predict(baseline, agaricus.test$data),
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
## A simple xgb.train example:
param <- list(max_depth = 2, eta = 0.05, verbose = 0, nthread = 2,
objective = "binary:logistic", eval_metric = "auc")
baseline <- xgb.train(param, dtrain, nrounds = 30, watchlist)
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
## A simple xgb.train example:
param <- list(max_depth = 2, eta = 0.05, verbose = 0, nthread = 2,
objective = "binary:logistic", eval_metric = "auc")
baseline <- xgb.train(param, dtrain, nrounds = 5, watchlist)
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
#set the prior weight for all almond-smelling mushrooms to be 50%
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`odor=almond` == 1, 1, 0.01)) %>%
unlist() %>%
as.numeric()
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
#set the prior weight for all almond-smelling mushrooms to be 50%
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`odor=almond` == 1, 0.01, 1)) %>%
unlist() %>%
as.numeric()
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
#set the prior weight for all almond-smelling mushrooms to be 50%
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`cap-shape=bell` == 1, 0.01, 1)) %>%
unlist() %>%
as.numeric()
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`odor=almond`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`cap-shape=bell`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
#set the prior weight for all almond-smelling mushrooms to be 50%
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`cap-shape=bell` == 1, 0.1, 0.5)) %>%
unlist() %>%
as.numeric()
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`cap-shape=bell`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
#set the prior weight for all almond-smelling mushrooms to be 50%
prior_probabilities <- agaricus.train$data %>%
as.matrix() %>%
as_tibble() %>%
transmute(prior_wts = ifelse(`cap-shape=bell` == 1, 0.1, 0.9)) %>%
unlist() %>%
as.numeric()
setinfo(dtrain, "base_margin", log(prior_probabilities))
prior_weighted <- xgb.train(param, dtrain, nrounds = 30, watchlist)
agaricus.test$data %>% as.matrix() %>% as_tibble() %>%
mutate(
y_hat_baseline = predict(baseline, agaricus.test$data),
y_hat_prior_wtd = predict(prior_weighted, agaricus.test$data),
y = agaricus.test$label) %>%
group_by(`cap-shape=bell`) %>%
summarise(
avg_baseline = mean(y_hat_baseline),
avg_wtd = mean(y_hat_prior_wtd),
avg_y = mean(y)
)
